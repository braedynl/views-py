from collections.abc import Callable, Iterator, Sequence
from typing import Any, Generic, Literal, Optional, TypeVar, overload

__all__ = ["LazySequence"]

T_co = TypeVar("T_co", covariant=True)
S_co = TypeVar("S_co", covariant=True)

Self = TypeVar("Self", bound="LazySequence")


class LazySequence(Sequence[T_co], Generic[T_co, S_co]):

    __slots__: tuple[Literal["_mapper"], Literal["_domain"]]

    def __init__(self: Self, mapper: Callable[[S_co], T_co], domain: Sequence[S_co]) -> None: ...
    def __len__(self: Self) -> int: ...
    @overload
    def __getitem__(self: Self, key: int) -> T_co: ...
    @overload
    def __getitem__(self: Self, key: slice) -> Self: ...
    def __iter__(self: Self) -> Iterator[T_co]: ...
    def __reversed__(self: Self) -> Iterator[T_co]: ...
    def __contains__(self: Self, value: Any) -> bool: ...
    def __deepcopy__(self: Self, memo: Optional[dict[int, Any]] = None) -> Self: ...
    def __copy__(self: Self) -> Self: ...
    def __eq__(self: Self, other: Any) -> bool: ...

    @property
    def mapper(self: Self) -> Callable[[S_co], T_co]: ...
    @property
    def domain(self: Self) -> Sequence[S_co]: ...
